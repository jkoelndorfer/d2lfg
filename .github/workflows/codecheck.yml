---

name: codecheck
run-name: Code check for ${{ github.ref_name }} (${{ github.sha }})
on:
  - pull_request
  - push

concurrency:
  group: codecheck-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_STATIC_CHECK_VERSION: "3.8"
  TOX_VERSION: ">= 4.11.4, < 5"

jobs:
  static:
    name: Perform static code analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_STATIC_CHECK_VERSION }}

      - name: Install tox
        run:  python -m pip install "tox $TOX_VERSION"

      - name: Setup tox environments
        run:  tox run -vv --notest -e lint -e type_check -e docs

      - name: Lint code
        run:  tox run --skip-pkg-install -e lint

      - name: Type check code
        run:  tox run --skip-pkg-install -e type_check

      - name: Ensure docs build
        run:  tox run --skip-pkg-install -e docs

  tests:
    name: Run tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        py:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Determine tox environment name
        shell: python
        env:
          PYTHON_VERSION: ${{ matrix.py }}
        run: |
          import os

          tox_env_ver = os.environ["PYTHON_VERSION"].replace(".", "")
          with open(os.environ["GITHUB_ENV"], "w") as f:
            f.write(f"TOX_ENV=py{ tox_env_ver }\n")

      - name:  Install tox
        shell: bash
        run:   python -m pip install "tox $TOX_VERSION"

      - name:  Setup tox environments
        shell: bash
        run:   tox run -vv --notest -e "coverage_erase,$TOX_ENV,coverage_report"

      - name:  Run tests
        shell: bash
        run:   tox run --skip-pkg-install -e "coverage_erase,$TOX_ENV,coverage_report"
